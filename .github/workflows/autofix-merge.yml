name: Autofix Auto-Merge

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  merge:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Merge passing autofix PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN || github.token }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const run = context.payload.workflow_run;
            const headSha = run.head_sha;

            // Find PRs for this SHA
            const prsResp = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:pr is:open ${headSha}`,
              per_page: 10,
            });
            const prs = prsResp.data.items || [];

            for (const prItem of prs) {
              const prNumber = prItem.number;
              const pr = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
              const labels = pr.data.labels.map(l => l.name);
              const sameRepo = pr.data.head.repo.full_name === `${owner}/${repo}`;
              const hasLabel = labels.includes('autofix') || labels.includes('bot') || labels.includes('dependencies');
              const isDependabot = pr.data.user && (pr.data.user.login === 'dependabot[bot]' || pr.data.user.type === 'Bot');
              const isDraft = pr.data.draft;
              const mergeableState = pr.data.mergeable_state; // may be 'clean' after refresh

              if (!sameRepo) continue;
              if (!hasLabel && !isDependabot) continue;
              if (isDraft) continue;

              // Ensure checks are successful
              const checks = await github.rest.checks.listForRef({ owner, repo, ref: pr.data.head.sha });
              const allChecks = checks.data.check_runs || [];
              const allSuccess = allChecks.every(c => ['success','skipped','neutral'].includes(c.conclusion));
              if (!allSuccess) continue;

              try {
                await github.rest.pulls.merge({ owner, repo, pull_number: prNumber, merge_method: 'squash' });
                core.info(`Merged PR #${prNumber}`);
              } catch (e) {
                core.warning(`Failed to merge PR #${prNumber}: ${e.message}`);
              }
            }
