name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
      AUTH_MODE: none
      REGISTRY_BACKEND: db
      RUNS_DB_MAX_ROWS: 1000
    permissions:
      contents: write
      actions: write
      pull-requests: write
      issues: write
      checks: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare DB and run Alembic migrations
        env:
          SCPLN_DB: data/scpln.db
        run: |
          mkdir -p data
          # Apply migrations to ensure schema is up-to-date
          alembic upgrade head

      - name: Seed canonical config for smoke test
        run: |
          python3 scripts/seed_canonical.py --save-db --name ci-smoke-test

      - name: Install test reporter (xml)
        run: |
          pip install unittest-xml-reporting



      - name: Run tests and produce JUnit XML
        run: |
          python scripts/run_tests_xml.py

      - name: Planning smoke assert (anchor DET_near)
        run: |
          python - <<'PY'
          from fastapi.testclient import TestClient
          from main import app
          import time, pathlib, subprocess, json
          client = TestClient(app)
          ver = f"ci-{int(time.time())}"
          # The first seeded config should have id=1
          config_version_id = 1

          r = client.post(
              "/plans/create_and_execute",
              json={
                  "version_id": ver,
                  "config_version_id": config_version_id,
                  "weeks": 4,
                  "round_mode": "int",
                  "lt_unit": "day",
                  "cutover_date": "2025-01-15",
                  "anchor_policy": "DET_near",
                  "apply_adjusted": False,
              },
              timeout=120,
          )
          assert r.status_code == 200, r.text
          out_dir = r.json().get("out_dir")
          p = pathlib.Path(out_dir) / "plan_final.json"
          print("out_dir=", out_dir)
          assert p.exists(), f"missing {p}"
          subprocess.run(["python", "scripts/spill_smoke.py", "-i", str(p)], check=True)
          subprocess.run(["python", "scripts/spill_assert.py", "-i", str(p)], check=True)
          PY

      - name: Debug on failure (verbose discovery)
        if: failure()
        run: |
          set +e
          python -V
          pip freeze | sed -n '1,200p'
          echo "Running unittest discover (verbose) for debugging..."
          python -m unittest discover -s tests -p "test_*.py" -v || true
          echo "Inline discovery run..."
          python - <<'PY'
          import unittest, traceback
          loader = unittest.defaultTestLoader
          try:
              suite = loader.discover('tests', pattern='test_*.py')
              print('Discovered cases:', suite.countTestCases())
              runner = unittest.TextTestRunner(verbosity=2)
              res = runner.run(suite)
              print('Success:', res.wasSuccessful())
          except Exception as e:
              traceback.print_exc()
              raise
          PY
          set -e

      - name: Publish Unit Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: |
            test-results/**/*.xml
          comment_mode: always
          check_name: Unit Test Results

      - name: Upload test results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/**/*.xml
          if-no-files-found: ignore

      - name: Comment PR with result
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const conclusion = "${{ job.status }}";
            const number = context.payload.pull_request.number;
            const summary = conclusion === 'success' ? '✅ CI passed' : `❌ CI ${conclusion}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: number,
              body: `${summary} (workflow: CI)`
            });
